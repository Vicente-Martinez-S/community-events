{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vicente-Martinez-S/community-events/blob/main/TSB\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BifcCX8ZAwHs"
      },
      "source": [
        "# Created by: Prof. Valdecy Pereira, D.Sc.\n",
        "# UFF - Universidade Federal Fluminense (Brazil)\n",
        "# email:  valdecy.pereira@gmail.com\n",
        "# Intermittent Demand - TSB\n",
        "\n",
        "# GitHub Repository: <https://github.com/Valdecy>"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iEnio4_pA0ju",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cee47eb3-7c0e-4200-90db-0ea5d6ebd8b3"
      },
      "source": [
        "# Install\n",
        "!pip install pyInterDemand"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pyInterDemand in /usr/local/lib/python3.11/dist-packages (1.4.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from pyInterDemand) (3.10.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from pyInterDemand) (1.26.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from pyInterDemand) (2.2.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->pyInterDemand) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->pyInterDemand) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->pyInterDemand) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->pyInterDemand) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4sgupRzA2tS"
      },
      "source": [
        "# Required Libraries\n",
        "import pandas as pd\n",
        "\n",
        "from pyInterDemand.algorithm.intermittent import plot_int_demand, classification, mase, rmse\n",
        "from pyInterDemand.algorithm.intermittent import tsb_method"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6I7s9bwiA4RV",
        "outputId": "af66599e-eb58-41d9-b0f7-005dea013067"
      },
      "source": [
        "# Load Dataset\n",
        "data = {\n",
        "        'DATE': ['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n",
        "                 '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12',\n",
        "                 '2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',\n",
        "                 '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12',\n",
        "                 '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06',\n",
        "                 '2024-07', '2024-08', '2024-09', '2024-10', '2024-11', '2024-12'],\n",
        "\n",
        "        'Value': [5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 5, 0, 0, 0, 0, 0]\n",
        "       }\n",
        "\n",
        "dataset = pd.DataFrame(data)\n",
        "dataset['DATE'] = pd.to_datetime(dataset['DATE'])\n",
        "dataset"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         DATE  Value\n",
              "0  2022-01-01      5\n",
              "1  2022-02-01      0\n",
              "2  2022-03-01      5\n",
              "3  2022-04-01      0\n",
              "4  2022-05-01      0\n",
              "5  2022-06-01      0\n",
              "6  2022-07-01      0\n",
              "7  2022-08-01      0\n",
              "8  2022-09-01      0\n",
              "9  2022-10-01      0\n",
              "10 2022-11-01      0\n",
              "11 2022-12-01      5\n",
              "12 2023-01-01      5\n",
              "13 2023-02-01      0\n",
              "14 2023-03-01      0\n",
              "15 2023-04-01      0\n",
              "16 2023-05-01      0\n",
              "17 2023-06-01      5\n",
              "18 2023-07-01      0\n",
              "19 2023-08-01      0\n",
              "20 2023-09-01      0\n",
              "21 2023-10-01      5\n",
              "22 2023-11-01      5\n",
              "23 2023-12-01      0\n",
              "24 2024-01-01      0\n",
              "25 2024-02-01      0\n",
              "26 2024-03-01      0\n",
              "27 2024-04-01      5\n",
              "28 2024-05-01      5\n",
              "29 2024-06-01      0\n",
              "30 2024-07-01      5\n",
              "31 2024-08-01      0\n",
              "32 2024-09-01      0\n",
              "33 2024-10-01      0\n",
              "34 2024-11-01      0\n",
              "35 2024-12-01      0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b45772d-7d18-4bde-8b96-92ba3b328898\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATE</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-02-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-03-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-04-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-05-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2022-06-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2022-07-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2022-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2022-09-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2022-10-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2022-11-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2022-12-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2023-02-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2023-03-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2023-04-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2023-05-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2023-06-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2023-07-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2023-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2023-09-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>2023-10-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>2023-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>2024-01-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2024-03-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>2024-05-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>2024-06-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>2024-07-01</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>2024-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2024-09-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>2024-10-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>2024-11-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b45772d-7d18-4bde-8b96-92ba3b328898')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b45772d-7d18-4bde-8b96-92ba3b328898 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b45772d-7d18-4bde-8b96-92ba3b328898');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4bf3d0e9-8da0-4039-9513-f70046d1de65\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4bf3d0e9-8da0-4039-9513-f70046d1de65')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4bf3d0e9-8da0-4039-9513-f70046d1de65 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_969dc663-71a9-40f6-8281-dfd761041b59\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_969dc663-71a9-40f6-8281-dfd761041b59 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 36,\n  \"fields\": [\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-01-01 00:00:00\",\n        \"max\": \"2024-12-01 00:00:00\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"2024-12-01 00:00:00\",\n          \"2023-02-01 00:00:00\",\n          \"2024-03-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e5nceodcA6xL",
        "outputId": "e9163036-491c-4d01-a0d1-2fe649f95fe3"
      },
      "source": [
        "# Prepare Time Series TS\n",
        "ts = dataset['Value'].copy(deep=True)\n",
        "ts.index = pd.DatetimeIndex(dataset['DATE'])  # Quité dayfirst=True porque tus fechas están en formato YYYY-MM\n",
        "ts = ts.sort_index()\n",
        "\n",
        "# Reindexar con frecuencia mensual explícita\n",
        "ts = ts.reindex(pd.date_range(ts.index.min(), ts.index.max(), freq='MS'), fill_value=0)\n",
        "ts = ts.loc[ts[(ts != 0)].first_valid_index():]\n",
        "\n",
        "print('')\n",
        "print('Total Number of Observations: ', ts.shape[0])\n",
        "print('Total Number of Zeros: ', len(ts[ts == 0]))\n",
        "print('Start Date: ', ts.index[0])\n",
        "print('End Date: ', ts.index[-1])\n",
        "print('')"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total Number of Observations:  36\n",
            "Total Number of Zeros:  26\n",
            "Start Date:  2022-01-01 00:00:00\n",
            "End Date:  2024-12-01 00:00:00\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rRUn-kuNA9FB",
        "outputId": "6a38640e-62f2-4006-8c20-191d1d6d9898"
      },
      "source": [
        "# Time Series Classification\n",
        "adi, cv_sq = classification(ts)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADI:  3.6 , CV:  2.608 , Type:  Lumpy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 869
        },
        "id": "43cKEmzMA_bE",
        "outputId": "b09c798c-e6e5-4975-d88b-0e669ca85db2"
      },
      "source": [
        "# Time Series Plot\n",
        "plot_int_demand(ts, size_x = 15, size_y = 10, bar_width = 0.3)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "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2uijj0Y+aOWBTh7opK/kRgxWFVy4cCH3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVgBAAAAAABACoNVBTt37sx9AhLoo49GPmjlg1ba6KOPRj5o5YFOHuikr+RGDFYV9Pf35z4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwomJiZyn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYNVBS0tLblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqC9evX5z4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwqOHTuW+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisAAAAAAAAIIXBqoKurq7cJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGAFAAAAAAAAKQxWFQwMDOQ+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBisAAAAAAABIYbCqYPv27blPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCM2fO5D4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwrGx8dzn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYNVBc3NzblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCTZs25T4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwqOHDmS+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisAAAAAAAAIIXBqoLVq1fnPgEJ9NFHIx+08kErbfTRRyMftPJAJw900ldyIwarChoaGnKfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UF586dy30CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVgAAAAAAAJDCYFVBd3d37hOQQB99NPJBKx+00kYffTTyQSsPdPJAJ30lN2KwqmBgYCD3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVhVMDo6mvsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCpobGzMfQIS6KOPRj5o5YNW2uijj0Y+aOWBTh7opK/kRgxWFZT8e0gd0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisKjh06FDuE5BAH3008kErH7TSRh99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//3vv+7XT09Px/333x/d3d1RX//DL+ZqamqKpqamH/tINQcOHIg9e/bkPgOPgz76aOSDVgvr/XxvdL+8O/cZc3o/3xsTmyZoJYyPpYUpfSzRyAetPNDJg0onpfcDNSqNniozMzOxf//+uPPOO6OhIf01VDf0FVb79u2LwcHBeM5znjPvX/bAAw/EBz/4wZicnIxFixZd9/e1tbUt+OOuNm7cmPsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY1u6HtYveQlL4mHHnooHnzwwbn/PO95z4vXvva18eCDD95So1TK8PBw7hOQQB99NPJBKx+00kYffTTyQSsPdPJAJ30lN7qhwaqtrS327t077z9Lly6NlStXxt69e2/WjXKuXr2a+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjSr9KYGlq6ury30CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EY3/KcEPtZXvvKVp+AMLz09PblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIr7Cq4NE/ohKa6KOPRj5o5YNW2uijj0Y+aOWBTh7opK/kRgxWFczMzOQ+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBqsK2tvbc5+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQUdHR25T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqgr6+vtwnIIE++mjkg1Y+aKWNPvpo5INWHujkgU76Sm7EYAUAAAAAAAApDFYVrF+/PvcJSKCPPhr5oJUPWmmjjz4a+aCVBzp5oJO+khsxWFUwPj6e+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisKrh8+XLuE5BAH3008kErH7TSRh99NPJBKw908kAnfSU3YrACAAAAAACAFAarCnp6enKfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFx44dy30CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVhU8/PDDuU9AAn300cgHrXzQSht99NHIB6080MkDnfSV3IjBqoLW1tbcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVwerVq3OfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFJ06cyH0CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVgAAAAAAAJDCYFXBunXrcp+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQVTU1O5T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqgosXL+Y+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBisAAAAAAABIYbCqYNeuXblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCvr6+3CcggT76aOSDVj5opY0++mjkg1Ye6OSBTvpKbsRgVcHk5GTuE5BAH3008kErH7TSRh99NPJBKw908kAnfSU3YrCqYOnSpblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCNWvW5D4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwqOHz+e+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisAAAAAAAAIIXBqoKSvyTPAX300cgHrXzQSht99NHIB6080MkDnfSV3IjBqoLZ2dncJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVweDgYO4TkEAffTTyQSsftNJGH3008kErD3TyQCd9JTdisAIAAAAAAIAUBqsKduzYkfsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCo4depU7hOQQB99NPJBKx+00kYffTTyQSsPdPJAJ30lN2KwqmBiYiL3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVhV0NLSkvsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCrYsGFD7hOQQB99NPJBKx+00kYffTTyQSsPdPJAJ30lN2KwquDo0aO5T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMEKAAAAAAAAUhisKujs7Mx9AhLoo49GPmjlg1ba6KOPRj5o5YFOHuikr+RGDFYV1NXV5T4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwoGBgZyn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYMVAAAAAAAApDBYVbBt27bcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVwblz53KfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFY2NjuU9AAn300cgHrXzQSht99NHIB608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9tSpU3OP94YNG+Y9Z+vq6uYe723btsW5c+dibGwsmpqaYvPmzcnHe3BwMEZGRhZ8vJubmxd8zj728V6xYkW0trbOe85eu3Ytrl27FvX19bF79+44dOhQzM7OxrJly2LZsmXzHu+RkZG4cuXKdc/Z9vb26OjomPd4T0xMLPicbW1tjc7Ozti/f3+0tbUt+Jw9efJkTE5OxpIlS2xfIx59zt4KrxHHjh2Ltra2W+o1YqHn7I2+RlxqvhQTByZkXiOGFw/Hd77znVi5cuUt8RqRes66vkaMjIzE85///FvuNeLJfh4x0TQRs7OzEq8R+/bti9bW1qfkNYLPI/g8gs8juuLUqVPR2NgYEbfW/9a41V4jZmZmYtmyZdlfI0YbRuf+WXweMf/xPnPmTCxfvvyWeY2o1Wrx46qr3civjoipqano7++Pa9euxf/6X/8rPvrRj8b999+/4Gg1PT0d999/f3R3d99SX2F14MCBJxzpkA999NHIB60W1vv53uh+eXfuM+b0fr43JjZN0EoYH0sLU/pYopEPWnmgkweVTkrvB2pUGj1VZmZmYv/+/XHnnXdGQ0P6a6hu+CusGhsbY/v27RER8dznPje+/e1vxwc+8IH48Ic//Lh/T1tbWyxatOhG/1WyVq1alfsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY1u6E8JXMjs7GxMTk4+FbfYePRLW6GJPvpo5INWPmiljT76aOSDVh7o5IFO+kpudEOD1dvf/vZ44IEHoq+vLx566KF4+9vfHl/5ylfita997c26T9Kjv/8Umuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EY39FsCBwcH43Wve12cO3culi1bFs985jPjC1/4Qtx111036z4AAAAAAAAU5oYGq//6X//rzbrDytatW3OfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7nRk/4eViV69I9phCb66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFIyMjuU9AAn300cgHrXzQSht99NHIB6080MkDnfSV3IjBqoLFixfnPgEJ9NFHIx+08kErbfTRRyMftPJAJw900ldyIwarCrZv3577BCTQRx+NfNDKB6200UcfjXzQygOdPNBJX8mNGKwqOHjwYO4TkEAffTTyQSsftNJGH3008kErD3TyQCd9JTdisAIAAAAAAIAUBqsKOjo6cp+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQUtLS25T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqgjNnzuQ+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBisAAAAAAABIYbCqYMuWLblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCy5cv5z4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwqGhoZyn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYNVBYsWLcp9AhLoo49GPmjlg1ba6KOPRj5o5YFOHuikr+RGDFYV7Nq1K/cJSKCPPhr5oJUPWmmjjz4a+aCVBzp5oJO+khsxWFVw8ODB3CcggT76aOSDVj5opY0++mjkg1Ye6OSBTvpKbsRgVUGtVst9AhLoo49GPmjlg1ba6KOPRj5o5YFOHuikr+RGDFYVLF++PPcJSKCPPhr5oJUPWmmjjz4a+aCVBzp5oJO+khsxWFXQ1taW+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisKjh16lTuE5BAH3008kErH7TSRh99NPJBKw908kAnfSU3YrACAAAAAACAFAarCjZt2pT7BCTQRx+NfNDKB6200UcfjXzQygOdPNBJX8mNGKwqGBoayn0CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVhVcvXo19wlIoI8+GvmglQ9aaaOPPhr5oJUHOnmgk76SGzFYVVBXV5f7BCTQRx+NfNDKB6200UcfjXzQygOdPNBJX8mNGKwq6OnpyX0CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVhUcPnw49wlIoI8+GvmglQ9aaaOPPhr5oJUHOnmgk76SGzFYVTAzM5P7BCTQRx+NfNDKB6200UcfjXzQygOdPNBJX8mNGKwqaG9vz30CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVhWsWLEi9wlIoI8+GvmglQ9aaaOPPhr5oJUHOnmgk76SGzFYVXDy5MncJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGAFAAAAAAAAKQxWFWzYsCH3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVhVMDY2lvsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCq4fPly7hOQQB99NPJBKx+00kYffTTyQSsPdPJAJ30lN2KwAgAAAAAAgBQGqwr27NmT+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisKjhy5EjuE5BAH3008kErH7TSRh99NPJBKw908kAnfSU3YrCqYHp6OvcJSKCPPhr5oJUPWmmjjz4a+aCVBzp5oJO+khsxWFXQ1taW+wQk0EcfjXzQygettNFHH4180MoDnTzQSV/JjRisKli1alXuE5BAH3008kErH7TSRh99NPJBKw908kAnfSU3YrCq4MSJE7lPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwQoAAAAAAABSGKwqWLduXe4TkEAffTTyQSsftNJGH3008kErD3TyQCd9JTdisKpgcnIy9wlIoI8+GvmglQ9aaaOPPhr5oJUHOnmgk76SGzFYVXDp0qXcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGAFAAAAAAAAKQxWFezevTv3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVhV0Nvbm/sEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCqYmprKfQIS6KOPRj5o5YNW2uijj0Y+aOWBTh7opK/kRgxWFSxdujT3CUigjz4a+aCVD1ppo48+GvmglQc6eaCTvpIbMVhV0NXVlfsEJNBHH4180MoHrbTRRx+NfNDKA5080ElfyY0YrCoo+feQOqCPPhr5oJUPWmmjjz4a+aCVBzp5oJO+khsxWAEAAAAAAEAKg1UFa9euzX0CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVhVMT0/nPgEJ9NFHIx+08kErbfTRRyMftPJAJw900ldyIwarCi5cuJD7BCTQRx+NfNDKB6200UcfjXzQygOdPNBJX8mNGKwAAAAAAAAghcGqgp07d+Y+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBqsK+vv7c5+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQUTExO5T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqgpaWltwnIIE++mjkg1Y+aKWNPvpo5INWHujkgU76Sm7EYFXB+vXrc5+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQXH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tPJAJw900ldyIwarCgYHB3OfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFIyMjuU9AAn300cgHrXzQSht99NHIB6080MkDnfSV3IjBqoLGxsbcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVQcm/h9QBffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqgkOHDuU+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBisAAAAAAABIYbCqYOXKlblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqC5ubm3CcggT76aOSDVj5opY0++mjkg1Ye6OSBTvpKbsRgVcGZM2dyn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYMVAAAAAAAApDBYVbBly5bcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVweXLl3OfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFQ0NDuU9AAn300cgHrXzQSht99NHIB6080MkDnfSV3IjBqoKGhobcJyCBPvpo5INWPmiljT76aOSDVh7o5IFO+kpuxGBVwc6dO3OfgAT66KORD1r5oJU2+uijkQ9aeaCTBzrpK7kRg1UFBw4cyH0CEuijj0Y+aOWDVtroo49GPmjlgU4e6KSv5EYMVgAAAAAAAJDCYFXBihUrcp+ABProo5EPWvmglTb66KORD1p5oJMHOukruRGDVQWtra25T0ACffTRyAetfNBKG3300cgHrTzQyQOd9JXciMGqglOnTuU+AQn00UcjH7TyQStt9NFHIx+08kAnD3TSV3IjBisAAAAAAABIYbCqYNOmTblPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCa9eu5T4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwpKfsI4oI8+GvmglQ9aaaOPPhr5oJUHOnmgk76SGzFYVVBfz8OmjD76aOSDVj5opY0++mjkg1Ye6OSBTvpKblTuf/MnYffu3blPQAJ99NHIB6180EobffTRyAetPNDJA530ldyIwaqCQ4cO5T4BCfTRRyMftPJBK2300UcjH7TyQCcPdNJXciMGqwpmZ2dzn4AE+uijkQ9a+aCVNvroo5EPWnmgkwc66Su5EYNVBcuWLct9AhLoo49G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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8TUkYeQbBBlm",
        "outputId": "84d87a2b-691a-439c-ea7f-a6108b64bc25"
      },
      "source": [
        "# TSB\n",
        "v, q, forecast = tsb_method(ts, alpha = 0.25, beta = 0, n_steps = 4, freq = '1d')\n",
        "plot_int_demand(ts, size_x = 15, size_y = 10, bar_width = 0.3, prediction = forecast)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:216: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  v_i[0]        = ts[0]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:216: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  v_i[0]        = ts[0]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:217: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  q_i[0]        = 1\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:218: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  f_i[0]        = v_i[0]*q_i[0]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:218: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  f_i[0]        = v_i[0]*q_i[0]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:220: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  if (ts[i] > 0):\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:223: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  v_i[idx_1+1] = alpha*v[idx_2] + (1 - alpha)*v_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:223: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  v_i[idx_1+1] = alpha*v[idx_2] + (1 - alpha)*v_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:225: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  q_i[idx_1+1] = beta + (1 - beta)*q_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:225: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  q_i[idx_1+1] = beta + (1 - beta)*q_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:226: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  f_i[idx_1+1] = v_i[idx_1+1]*q_i[idx_1+1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:226: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  f_i[idx_1+1] = v_i[idx_1+1]*q_i[idx_1+1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:229: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  v_i[idx_1+1] = v_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:229: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  v_i[idx_1+1] = v_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:230: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  q_i[idx_1+1] = (1 - beta)*q_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:230: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  q_i[idx_1+1] = (1 - beta)*q_i[idx_1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:231: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  f_i[idx_1+1] = v_i[idx_1+1]*q_i[idx_1+1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:231: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
            "  f_i[idx_1+1] = v_i[idx_1+1]*q_i[idx_1+1]\n",
            "/usr/local/lib/python3.11/dist-packages/pyInterDemand/algorithm/intermittent.py:233: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  new_series = pd.Series(np.repeat(f_i[-1], len(idx)), index = idx)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bpbdv24jBK3v",
        "outputId": "c575380d-11c4-46ca-9c97-badff60d10f4"
      },
      "source": [
        "# Error\n",
        "print('MASE = ', round(mase(ts, forecast), 3), ', RMSE = ', round(rmse(ts, forecast), 3))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MASE =  1.271 , RMSE =  5.373\n"
          ]
        }
      ]
    }
  ]
}